apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{name}}
  labels:
    app: {{name}}
    tier: apps
    component: apis
    service: {{serviceTag}}
  namespace: {{namespace}}
spec:
  replicas: {{replicas}}
  selector:
    matchLabels:
      app: {{name}}
      tier: apps
      component: apis
      service: {{serviceTag}}
  template:
    metadata:
      annotations:
        sidecar.istio.io/lifePreStopCyclePortCheck: "{{environmentVariables.NODE_PORT}}"
        sidecar.istio.io/proxyCPU: {{proxyCPU}}
        sidecar.istio.io/proxyMemory: {{proxyMemory}}
      labels:
        app: {{name}}
        tier: apps
        component: apis
        service: {{serviceTag}}
      namespace: {{namespace}}
    spec:
      serviceAccountName: cockroachdb
      initContainers:
        # The init-certs container sends a certificate signing request to the
        # kubernetes cluster.
        # You can see pending requests using: kubectl get csr
        # CSRs can be approved using:         kubectl certificate approve <csr name>
        #
        # In addition to the client certificate and key, the init-certs entrypoint will symlink
        # the cluster CA to the certs directory.
        - name: init-certs
          image: cockroachdb/cockroach-k8s-request-cert:0.4
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/ash"
            - "-ecx"
            - "/request-cert -namespace=${POD_NAMESPACE} -certs-dir=/cockroach-certs -type=client -user=root -symlink-ca-from=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: client-certs
              mountPath: /cockroach-certs
      containers:
        - name: {{name}}
          image: gcr.io/{{PROJECT_ID}}/{{IMAGE_NAME}}:{{IMAGE_TAG}}
          imagePullPolicy: Always
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/bash
                  - -c
                  - kill -TERM `pgrep node`
          command:
            - /bin/bash
            - -ec
            - while [ $(netstat -plunt | grep tcp | grep 15020 | wc -l | xargs) -eq 0 ]; do sleep 1; done
              && sleep 5s && cd /home/salesmate
              && cp /home/salesmate/config-files/config.js config/service-configuration/{{environmentVariables.NODE_ENV}}.js
              && cp /home/salesmate/service-endpoints/config.js config/service-endpoints/{{environmentVariables.NODE_ENV}}.js
              && cp /home/salesmate/backend-config/config.js config/backend-config/{{environmentVariables.NODE_ENV}}.js
              && yes | cp /home/salesmate/gcp-keys/gcp-service-account-key.json config/gcp-service-account-key.json
              && source /home/salesmate/.bash_profile
              && nvm use {{nodeVersion}} && node --max-old-space-size={{maxOldSpaceSize}} --expose-gc {{fileToRun}}
          env:
            - name: NODE_ENV
              value: {{environmentVariables.NODE_ENV}}
            - name: NODE_PORT
              value: "{{environmentVariables.NODE_PORT}}"
          ports:
            - containerPort: {{environmentVariables.NODE_PORT}}
          volumeMounts:
            - name: client-certs
              mountPath: /cockroach-certs
            - name: tmp
              mountPath: /home/salesmate/tmp
            - name: config-file
              mountPath: /home/salesmate/config-files
            - name: service-endpoints
              mountPath: /home/salesmate/service-endpoints
            - name: backend-configmap
              mountPath: /home/salesmate/backend-config
            - mountPath: /home/salesmate/gcp-keys
              name: gcp-keys
          resources:
            requests:
              cpu: {{resources.request.cpu}}
              memory: {{resources.request.memory}}
      dnsConfig:
        options:
          - name: ndots
            value: "1"
          - name: single-request-reopen
            value: ""
      nodeSelector:
        pool: "apps"
      volumes:
        - name: client-certs
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: config-file
          configMap:
            name: {{serviceTag}}-configmap
        - name: service-endpoints
          configMap:
            name: service-endpoints-configmap
        - name: backend-configmap
          configMap:
            name: default-service-configmap
        - name: gcp-keys
          configMap:
            defaultMode: 420
            name: salesmate-gcp-keys
